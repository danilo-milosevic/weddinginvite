{"ast":null,"code":"var _jsxFileName = \"/Users/danilomilosevic/Documents/Danilo/threejs-invite/threejs-invite/src/components/leaves/leaves.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useRef, useMemo } from 'react';\nimport { useFrame } from '@react-three/fiber';\nimport * as THREE from 'three';\n\n// Individual floating cube component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FloatingCube = ({\n  position,\n  color,\n  size,\n  speed,\n  windDirection\n}) => {\n  _s();\n  const meshRef = useRef();\n  const clockRef = useRef(0);\n\n  // Random movement parameters for each cube\n  const moveParams = useMemo(() => ({\n    rotationSpeedX: (Math.random() - 0.5) * 0.02,\n    rotationSpeedY: (Math.random() - 0.5) * 0.02,\n    rotationSpeedZ: (Math.random() - 0.5) * 0.02,\n    floatAmplitude: 0.5 + Math.random() * 1,\n    floatFrequency: 0.5 + Math.random() * 1.5,\n    swayAmplitude: 1 + Math.random() * 2,\n    fallSpeed: 0.01 + Math.random() * 0.02,\n    initialPosition: [...position]\n  }), [position]);\n  useFrame((state, delta) => {\n    if (meshRef.current) {\n      clockRef.current += delta;\n\n      // Rotation like leaves tumbling\n      meshRef.current.rotation.x += moveParams.rotationSpeedX;\n      meshRef.current.rotation.y += moveParams.rotationSpeedY;\n      meshRef.current.rotation.z += moveParams.rotationSpeedZ;\n\n      // Floating motion (up and down)\n      const floatY = Math.sin(clockRef.current * moveParams.floatFrequency) * moveParams.floatAmplitude;\n\n      // Swaying motion (left and right) with wind\n      const swayX = Math.sin(clockRef.current * 0.8) * moveParams.swayAmplitude;\n      const windX = windDirection.x * clockRef.current * 0.3;\n      const windZ = windDirection.z * clockRef.current * 0.2;\n\n      // Gentle falling motion\n      const fallY = -clockRef.current * moveParams.fallSpeed;\n\n      // Apply all movements\n      meshRef.current.position.x = moveParams.initialPosition[0] + swayX + windX;\n      meshRef.current.position.y = moveParams.initialPosition[1] + floatY + fallY;\n      meshRef.current.position.z = moveParams.initialPosition[2] + windZ;\n\n      // Reset position when cube falls too low (recycle)\n      if (meshRef.current.position.y < -15) {\n        meshRef.current.position.y = 10 + Math.random() * 5;\n        meshRef.current.position.x = moveParams.initialPosition[0];\n        meshRef.current.position.z = moveParams.initialPosition[2];\n        clockRef.current = 0;\n      }\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"mesh\", {\n    ref: meshRef,\n    position: position,\n    children: [/*#__PURE__*/_jsxDEV(\"boxGeometry\", {\n      args: [size, size, size]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n      color: color,\n      transparent: true,\n      opacity: 0.8,\n      metalness: 0.3,\n      roughness: 0.4\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n\n// Main component that creates all the floating cubes\n_s(FloatingCube, \"/mIltD8kc/4e09I8TxyN0Pl1zMQ=\", false, function () {\n  return [useFrame];\n});\n_c = FloatingCube;\nconst FloatingLeaves = ({\n  count = 100\n}) => {\n  _s2();\n  const cubes = useMemo(() => {\n    const cubeArray = [];\n    const colors = ['#ff6b6b', '#4ecdc4', '#45b7d1', '#f9ca24', '#f0932b', '#eb4d4b', '#6c5ce7', '#a29bfe', '#fd79a8', '#fdcb6e', '#e17055', '#81ecec', '#74b9ff', '#55a3ff', '#00b894'];\n    for (let i = 0; i < count; i++) {\n      cubeArray.push({\n        id: i,\n        position: [(Math.random() - 0.5) * 20,\n        // x: spread across screen\n        3,\n        // y: start above screen\n        2 // z: some depth variation\n        ],\n        color: colors[Math.floor(Math.random() * colors.length)],\n        size: 0.1 + Math.random() * 0.3,\n        // varying sizes\n        speed: 0.5 + Math.random() * 1.5,\n        windDirection: {\n          x: 0.5 + Math.random() * 0.5,\n          y: -0.5,\n          z: (Math.random() - 0.5) * 0.3\n        }\n      });\n    }\n    return cubeArray;\n  }, [count]);\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    children: cubes.map(cube => /*#__PURE__*/_jsxDEV(FloatingCube, {\n      position: cube.position,\n      color: cube.color,\n      size: cube.size,\n      speed: cube.speed,\n      windDirection: cube.windDirection\n    }, cube.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n};\n_s2(FloatingLeaves, \"6HxRkQ4jLZBxyUVn9ESV0syz75I=\");\n_c2 = FloatingLeaves;\nexport default FloatingLeaves;\nvar _c, _c2;\n$RefreshReg$(_c, \"FloatingCube\");\n$RefreshReg$(_c2, \"FloatingLeaves\");","map":{"version":3,"names":["React","useRef","useMemo","useFrame","THREE","jsxDEV","_jsxDEV","FloatingCube","position","color","size","speed","windDirection","_s","meshRef","clockRef","moveParams","rotationSpeedX","Math","random","rotationSpeedY","rotationSpeedZ","floatAmplitude","floatFrequency","swayAmplitude","fallSpeed","initialPosition","state","delta","current","rotation","x","y","z","floatY","sin","swayX","windX","windZ","fallY","ref","children","args","fileName","_jsxFileName","lineNumber","columnNumber","transparent","opacity","metalness","roughness","_c","FloatingLeaves","count","_s2","cubes","cubeArray","colors","i","push","id","floor","length","map","cube","_c2","$RefreshReg$"],"sources":["/Users/danilomilosevic/Documents/Danilo/threejs-invite/threejs-invite/src/components/leaves/leaves.js"],"sourcesContent":["import React, { useRef, useMemo } from 'react';\nimport { useFrame } from '@react-three/fiber';\nimport * as THREE from 'three';\n\n// Individual floating cube component\nconst FloatingCube = ({ position, color, size, speed, windDirection }) => {\n  const meshRef = useRef();\n  const clockRef = useRef(0);\n\n  // Random movement parameters for each cube\n  const moveParams = useMemo(() => ({\n    rotationSpeedX: (Math.random() - 0.5) * 0.02,\n    rotationSpeedY: (Math.random() - 0.5) * 0.02,\n    rotationSpeedZ: (Math.random() - 0.5) * 0.02,\n    floatAmplitude: 0.5 + Math.random() * 1,\n    floatFrequency: 0.5 + Math.random() * 1.5,\n    swayAmplitude: 1 + Math.random() * 2,\n    fallSpeed: 0.01 + Math.random() * 0.02,\n    initialPosition: [...position]\n  }), [position]);\n\n  useFrame((state, delta) => {\n    if (meshRef.current) {\n      clockRef.current += delta;\n      \n      // Rotation like leaves tumbling\n      meshRef.current.rotation.x += moveParams.rotationSpeedX;\n      meshRef.current.rotation.y += moveParams.rotationSpeedY;\n      meshRef.current.rotation.z += moveParams.rotationSpeedZ;\n      \n      // Floating motion (up and down)\n      const floatY = Math.sin(clockRef.current * moveParams.floatFrequency) * moveParams.floatAmplitude;\n      \n      // Swaying motion (left and right) with wind\n      const swayX = Math.sin(clockRef.current * 0.8) * moveParams.swayAmplitude;\n      const windX = windDirection.x * clockRef.current * 0.3;\n      const windZ = windDirection.z * clockRef.current * 0.2;\n      \n      // Gentle falling motion\n      const fallY = -clockRef.current * moveParams.fallSpeed;\n      \n      // Apply all movements\n      meshRef.current.position.x = moveParams.initialPosition[0] + swayX + windX;\n      meshRef.current.position.y = moveParams.initialPosition[1] + floatY + fallY;\n      meshRef.current.position.z = moveParams.initialPosition[2] + windZ;\n      \n      // Reset position when cube falls too low (recycle)\n      if (meshRef.current.position.y < -15) {\n        meshRef.current.position.y = 10 + Math.random() * 5;\n        meshRef.current.position.x = moveParams.initialPosition[0];\n        meshRef.current.position.z = moveParams.initialPosition[2];\n        clockRef.current = 0;\n      }\n    }\n  });\n\n  return (\n    <mesh ref={meshRef} position={position}>\n      <boxGeometry args={[size, size, size]} />\n      <meshStandardMaterial \n        color={color}\n        transparent={true}\n        opacity={0.8}\n        metalness={0.3}\n        roughness={0.4}\n      />\n    </mesh>\n  );\n};\n\n// Main component that creates all the floating cubes\nconst FloatingLeaves = ({ count = 100 }) => {\n  const cubes = useMemo(() => {\n    const cubeArray = [];\n    const colors = [\n      '#ff6b6b', '#4ecdc4', '#45b7d1', '#f9ca24', '#f0932b',\n      '#eb4d4b', '#6c5ce7', '#a29bfe', '#fd79a8', '#fdcb6e',\n      '#e17055', '#81ecec', '#74b9ff', '#55a3ff', '#00b894'\n    ];\n\n    for (let i = 0; i < count; i++) {\n      cubeArray.push({\n        id: i,\n        position: [\n          (Math.random() - 0.5) * 20,  // x: spread across screen\n          3,      // y: start above screen\n          2,   // z: some depth variation\n        ],\n        color: colors[Math.floor(Math.random() * colors.length)],\n        size: 0.1 + Math.random() * 0.3, // varying sizes\n        speed: 0.5 + Math.random() * 1.5,\n        windDirection: {\n          x: 0.5 + Math.random() * 0.5,\n          y: -0.5,\n          z: (Math.random() - 0.5) * 0.3\n        }\n      });\n    }\n    return cubeArray;\n  }, [count]);\n\n  return (\n    <group>\n      {cubes.map((cube) => (\n        <FloatingCube\n          key={cube.id}\n          position={cube.position}\n          color={cube.color}\n          size={cube.size}\n          speed={cube.speed}\n          windDirection={cube.windDirection}\n        />\n      ))}\n    </group>\n  );\n};\n\nexport default FloatingLeaves;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}